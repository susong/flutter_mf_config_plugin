// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mf.flutter_mf_config_plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class ConfigLibraryApi {

  public enum ConfigTypeEnum {
    CLOUD_CONFIG(0),
    LOCAL_CONFIG(1),
    OTHER_CONFIG(2);

    private int index;
    private ConfigTypeEnum(final int index) {
      this.index = index;
    }
  }

  public enum ConfigEncryptEnum {
    NO_ENCRYPT(0),
    ENCRYPT_ALL(1);

    private int index;
    private ConfigEncryptEnum(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConfigParam {
    private @Nullable String filename;
    public @Nullable String getFilename() { return filename; }
    public void setFilename(@Nullable String setterArg) {
      this.filename = setterArg;
    }

    private @Nullable ConfigTypeEnum configTypeEnum;
    public @Nullable ConfigTypeEnum getConfigTypeEnum() { return configTypeEnum; }
    public void setConfigTypeEnum(@Nullable ConfigTypeEnum setterArg) {
      this.configTypeEnum = setterArg;
    }

    private @Nullable ConfigEncryptEnum configEncryptEnum;
    public @Nullable ConfigEncryptEnum getConfigEncryptEnum() { return configEncryptEnum; }
    public void setConfigEncryptEnum(@Nullable ConfigEncryptEnum setterArg) {
      this.configEncryptEnum = setterArg;
    }

    private @Nullable String encryptKey;
    public @Nullable String getEncryptKey() { return encryptKey; }
    public void setEncryptKey(@Nullable String setterArg) {
      this.encryptKey = setterArg;
    }

    public static final class Builder {
      private @Nullable String filename;
      public @NonNull Builder setFilename(@Nullable String setterArg) {
        this.filename = setterArg;
        return this;
      }
      private @Nullable ConfigTypeEnum configTypeEnum;
      public @NonNull Builder setConfigTypeEnum(@Nullable ConfigTypeEnum setterArg) {
        this.configTypeEnum = setterArg;
        return this;
      }
      private @Nullable ConfigEncryptEnum configEncryptEnum;
      public @NonNull Builder setConfigEncryptEnum(@Nullable ConfigEncryptEnum setterArg) {
        this.configEncryptEnum = setterArg;
        return this;
      }
      private @Nullable String encryptKey;
      public @NonNull Builder setEncryptKey(@Nullable String setterArg) {
        this.encryptKey = setterArg;
        return this;
      }
      public @NonNull ConfigParam build() {
        ConfigParam pigeonReturn = new ConfigParam();
        pigeonReturn.setFilename(filename);
        pigeonReturn.setConfigTypeEnum(configTypeEnum);
        pigeonReturn.setConfigEncryptEnum(configEncryptEnum);
        pigeonReturn.setEncryptKey(encryptKey);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("filename", filename);
      toMapResult.put("configTypeEnum", configTypeEnum == null ? null : configTypeEnum.index);
      toMapResult.put("configEncryptEnum", configEncryptEnum == null ? null : configEncryptEnum.index);
      toMapResult.put("encryptKey", encryptKey);
      return toMapResult;
    }
    static @NonNull ConfigParam fromMap(@NonNull Map<String, Object> map) {
      ConfigParam pigeonResult = new ConfigParam();
      Object filename = map.get("filename");
      pigeonResult.setFilename((String)filename);
      Object configTypeEnum = map.get("configTypeEnum");
      pigeonResult.setConfigTypeEnum(configTypeEnum == null ? null : ConfigTypeEnum.values()[(int)configTypeEnum]);
      Object configEncryptEnum = map.get("configEncryptEnum");
      pigeonResult.setConfigEncryptEnum(configEncryptEnum == null ? null : ConfigEncryptEnum.values()[(int)configEncryptEnum]);
      Object encryptKey = map.get("encryptKey");
      pigeonResult.setEncryptKey((String)encryptKey);
      return pigeonResult;
    }
  }
  private static class ConfigApiCodec extends StandardMessageCodec {
    public static final ConfigApiCodec INSTANCE = new ConfigApiCodec();
    private ConfigApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ConfigParam.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ConfigParam) {
        stream.write(128);
        writeValue(stream, ((ConfigParam) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ConfigApi {
    @NonNull List<ConfigParam> getDefaultNoEncryptConfigParam();
    @NonNull List<ConfigParam> getDefaultEncryptConfigParam(@Nullable String encryptKey);
    @NonNull String getCloudConfigFile();
    @NonNull String getLocalConfigFile();
    @NonNull Boolean init();
    @NonNull Boolean initWithEncryptKey(@NonNull String encryptKey);
    @NonNull Boolean initWithConfigParam(@Nullable List<ConfigParam> configParams);
    void reloadConfig(@NonNull Boolean clearLoadedConfig);
    void putString(@NonNull String key, @NonNull String value);
    void putInt(@NonNull String key, @NonNull Long value);
    void putDouble(@NonNull String key, @NonNull Double value);
    void putBoolean(@NonNull String key, @NonNull Boolean value);
    void putMap(@NonNull Map<String, Object> map, @NonNull Boolean isReplace);
    void putStringCloud(@NonNull String key, @NonNull String value);
    void putIntCloud(@NonNull String key, @NonNull Long value);
    void putDoubleCloud(@NonNull String key, @NonNull Double value);
    void putBooleanCloud(@NonNull String key, @NonNull Boolean value);
    void putMapCloud(@NonNull Map<String, Object> map, @NonNull Boolean isReplace);
    void putStringFile(@NonNull String filename, @NonNull String key, @NonNull String value);
    void putIntFile(@NonNull String filename, @NonNull String key, @NonNull Long value);
    void putDoubleFile(@NonNull String filename, @NonNull String key, @NonNull Double value);
    void putBooleanFile(@NonNull String filename, @NonNull String key, @NonNull Boolean value);
    void putMapFile(@NonNull String filename, @NonNull Map<String, Object> map, @NonNull Boolean isReplace);
    @NonNull String getString(@NonNull String key, @NonNull String defaultValue);
    @NonNull Long getInt(@NonNull String key, @NonNull Long defaultValue);
    @NonNull Double getDouble(@NonNull String key, @NonNull Double defaultValue);
    @NonNull Boolean getBoolean(@NonNull String key, @NonNull Boolean defaultValue);
    @NonNull Map<String, Object> getMap();
    @NonNull Map<String, Object> getMapCloud();
    @NonNull Map<String, Object> getMapFile(@NonNull String filename);
    @NonNull Map<String, Object> getAllMap();
    @NonNull Boolean contains(@NonNull String key);
    void save();
    void saveCloud();
    void saveFile(@NonNull String filename);

    /** The codec used by ConfigApi. */
    static MessageCodec<Object> getCodec() {
      return ConfigApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ConfigApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ConfigApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getDefaultNoEncryptConfigParam", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              List<ConfigParam> output = api.getDefaultNoEncryptConfigParam();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getDefaultEncryptConfigParam", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String encryptKeyArg = (String)args.get(0);
              List<ConfigParam> output = api.getDefaultEncryptConfigParam(encryptKeyArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getCloudConfigFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              String output = api.getCloudConfigFile();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getLocalConfigFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              String output = api.getLocalConfigFile();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.init", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.init();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.initWithEncryptKey", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String encryptKeyArg = (String)args.get(0);
              if (encryptKeyArg == null) {
                throw new NullPointerException("encryptKeyArg unexpectedly null.");
              }
              Boolean output = api.initWithEncryptKey(encryptKeyArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.initWithConfigParam", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<ConfigParam> configParamsArg = (List<ConfigParam>)args.get(0);
              Boolean output = api.initWithConfigParam(configParamsArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.reloadConfig", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean clearLoadedConfigArg = (Boolean)args.get(0);
              if (clearLoadedConfigArg == null) {
                throw new NullPointerException("clearLoadedConfigArg unexpectedly null.");
              }
              api.reloadConfig(clearLoadedConfigArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putString", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              String valueArg = (String)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putString(keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putInt", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Number valueArg = (Number)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putInt(keyArg, (valueArg == null) ? null : valueArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putDouble", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Double valueArg = (Double)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putDouble(keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putBoolean", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Boolean valueArg = (Boolean)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putBoolean(keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putMap", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Map<String, Object> mapArg = (Map<String, Object>)args.get(0);
              if (mapArg == null) {
                throw new NullPointerException("mapArg unexpectedly null.");
              }
              Boolean isReplaceArg = (Boolean)args.get(1);
              if (isReplaceArg == null) {
                throw new NullPointerException("isReplaceArg unexpectedly null.");
              }
              api.putMap(mapArg, isReplaceArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putStringCloud", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              String valueArg = (String)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putStringCloud(keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putIntCloud", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Number valueArg = (Number)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putIntCloud(keyArg, (valueArg == null) ? null : valueArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putDoubleCloud", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Double valueArg = (Double)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putDoubleCloud(keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putBooleanCloud", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Boolean valueArg = (Boolean)args.get(1);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putBooleanCloud(keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putMapCloud", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Map<String, Object> mapArg = (Map<String, Object>)args.get(0);
              if (mapArg == null) {
                throw new NullPointerException("mapArg unexpectedly null.");
              }
              Boolean isReplaceArg = (Boolean)args.get(1);
              if (isReplaceArg == null) {
                throw new NullPointerException("isReplaceArg unexpectedly null.");
              }
              api.putMapCloud(mapArg, isReplaceArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putStringFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String filenameArg = (String)args.get(0);
              if (filenameArg == null) {
                throw new NullPointerException("filenameArg unexpectedly null.");
              }
              String keyArg = (String)args.get(1);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              String valueArg = (String)args.get(2);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putStringFile(filenameArg, keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putIntFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String filenameArg = (String)args.get(0);
              if (filenameArg == null) {
                throw new NullPointerException("filenameArg unexpectedly null.");
              }
              String keyArg = (String)args.get(1);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Number valueArg = (Number)args.get(2);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putIntFile(filenameArg, keyArg, (valueArg == null) ? null : valueArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putDoubleFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String filenameArg = (String)args.get(0);
              if (filenameArg == null) {
                throw new NullPointerException("filenameArg unexpectedly null.");
              }
              String keyArg = (String)args.get(1);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Double valueArg = (Double)args.get(2);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putDoubleFile(filenameArg, keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putBooleanFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String filenameArg = (String)args.get(0);
              if (filenameArg == null) {
                throw new NullPointerException("filenameArg unexpectedly null.");
              }
              String keyArg = (String)args.get(1);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Boolean valueArg = (Boolean)args.get(2);
              if (valueArg == null) {
                throw new NullPointerException("valueArg unexpectedly null.");
              }
              api.putBooleanFile(filenameArg, keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.putMapFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String filenameArg = (String)args.get(0);
              if (filenameArg == null) {
                throw new NullPointerException("filenameArg unexpectedly null.");
              }
              Map<String, Object> mapArg = (Map<String, Object>)args.get(1);
              if (mapArg == null) {
                throw new NullPointerException("mapArg unexpectedly null.");
              }
              Boolean isReplaceArg = (Boolean)args.get(2);
              if (isReplaceArg == null) {
                throw new NullPointerException("isReplaceArg unexpectedly null.");
              }
              api.putMapFile(filenameArg, mapArg, isReplaceArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getString", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              String defaultValueArg = (String)args.get(1);
              if (defaultValueArg == null) {
                throw new NullPointerException("defaultValueArg unexpectedly null.");
              }
              String output = api.getString(keyArg, defaultValueArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getInt", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Number defaultValueArg = (Number)args.get(1);
              if (defaultValueArg == null) {
                throw new NullPointerException("defaultValueArg unexpectedly null.");
              }
              Long output = api.getInt(keyArg, (defaultValueArg == null) ? null : defaultValueArg.longValue());
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getDouble", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Double defaultValueArg = (Double)args.get(1);
              if (defaultValueArg == null) {
                throw new NullPointerException("defaultValueArg unexpectedly null.");
              }
              Double output = api.getDouble(keyArg, defaultValueArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getBoolean", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Boolean defaultValueArg = (Boolean)args.get(1);
              if (defaultValueArg == null) {
                throw new NullPointerException("defaultValueArg unexpectedly null.");
              }
              Boolean output = api.getBoolean(keyArg, defaultValueArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getMap", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<String, Object> output = api.getMap();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getMapCloud", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<String, Object> output = api.getMapCloud();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getMapFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String filenameArg = (String)args.get(0);
              if (filenameArg == null) {
                throw new NullPointerException("filenameArg unexpectedly null.");
              }
              Map<String, Object> output = api.getMapFile(filenameArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.getAllMap", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<String, Object> output = api.getAllMap();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.contains", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              Boolean output = api.contains(keyArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.save", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.save();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.saveCloud", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.saveCloud();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ConfigApi.saveFile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String filenameArg = (String)args.get(0);
              if (filenameArg == null) {
                throw new NullPointerException("filenameArg unexpectedly null.");
              }
              api.saveFile(filenameArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
